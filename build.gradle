buildscript {
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url = "https://maven.minecraftforge.net" }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.1'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'

def versionObj = new Version(major: 1, minor: 10, revision: 1, mcVersion: '1.16.5')

version = versionObj.toString()
group = "com.wynntils"
archivesBaseName = "Wynntils"

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.
compileJava.options.encoding = 'UTF-8'

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    hideOfficialWarningUntilChanged

    mappings channel: 'official', version: versionObj.mcVersion

    runs {
        client {
            workingDirectory project.file('run')

            environment 'MC_VERSION', versionObj.mcVersion

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                wynntils {
                    source sourceSets.main
                }
            }
        }

        if (project.hasProperty("minecraftEmailUsername") || project.hasProperty("minecraftPassword")) {
            eclipseUnsuppliedClient {
                parent runs.client

                args '--username=${string_prompt:Minecraft Email/Username}'
                args '--password=${password_prompt:Minecraft Password}'
            }

            intellijUnsuppliedClient {
                parent runs.client

                // If someone knows a prompt variable that actually hides the password when entering it for intellij then put it after "--password="
                args '--username=$Prompt$'
                args '--password=$Prompt$'
            }

            if (project.hasProperty('minecraftEmailUsername') && project.hasProperty('minecraftPassword')) {
                suppliedClient {
                    parent runs.client

                    args "--username=" + minecraftEmailUsername
                    args "--password=" + minecraftPassword
                }
            } else {
                eclipseSuppliedClient {
                    parent runs.client

                    if (project.hasProperty("minecraftEmailUsername")) {
                        args "--username=" + minecraftEmailUsername
                    } else {
                        args '--username=${string_prompt:Minecraft Email/Username}'
                    }

                    if (project.hasProperty("minecraftPassword")) {
                        args "--password=" + minecraftPassword
                    } else {
                        args '--password=${password_prompt:Minecraft Password}'
                    }
                }

                intellijSuppliedClient {
                    parent runs.client

                    if (project.hasProperty("minecraftEmailUsername")) {
                        args "--username=" + minecraftEmailUsername
                    } else {
                        args '--username=$Prompt$'
                    }

                    if (project.hasProperty("minecraftPassword")) {
                        args "--password=" + minecraftPassword
                    } else {
                        args '--password=$Prompt$'
                    }
                }
            }
        } else {
            eclipseClient {
                parent runs.client

                args '--username=${string_prompt:Minecraft Email/Username}'
                args '--password=${password_prompt:Minecraft Password}'
            }

            intellijClient {
                parent runs.client

                // If someone knows a prompt variable that actually hides the password when entering it for intellij then put it after "--password="
                args '--username=$Prompt$'
                args '--password=$Prompt$'
            }
        }
    }
}

idea {
    module {
        inheritOutputDirs = true
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

dependencies {
    minecraft "net.minecraftforge:forge:1.16.5-36.1.16"
    compile "javazoom:jlayer:1.0.1"

    // https://mvnrepository.com/artifact/javax.vecmath/vecmath
    implementation group: 'javax.vecmath', name: 'vecmath', version: '1.5.2'
}

processResources {
    inputs.property "description", "The best Wynncraft mod you'll probably find!\nBuild " + versionObj.getBuild()
    inputs.property "version", versionObj.toVersion()

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'description':"The best Wynncraft mod you'll probably find!\nBuild " + versionObj.getBuild(), 'version':versionObj.toVersion()
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title": "wynntils",
                "Specification-Vendor": "Wynntils Team",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"Wynntils Team",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

/*
 *  * Copyright Â© Wynntils - 2021.
 */

// We need to reobfuscate the Shadow Jar
reobf {
    shadowJar {}
}

shadowJar {
    dependencies {
        include(dependency('javazoom:jlayer:.*'))
    }

    baseName = archivesBaseName + "-" + version
    classifier = null
    version = null
    configurations = [project.configurations.compile]
}

class Version {
    int major, minor, revision
    String mcVersion

    static String getBuild() {
        System.getenv("BUILD_NUMBER") ?: System.getProperty("BUILD_NUMBER") ?: "DEV"
    }

    String toVersion() {
        "${major}.${minor}.${revision}"
    }

    String toString() {
        "${major}.${minor}.${revision}_$build-MC${mcVersion}"
    }
}
